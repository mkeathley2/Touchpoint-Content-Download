#Created by Lisa McLaughlin from TP Documentation MAR 2023
# Indicate which roles you want to access this Dashboard.
#roles=Edit

# Include CSS to make widgets work the same as on the homepage

# NOTE: In order for this to work you have to change a class in the actual widget HTML file from:
#   class="box-title"   to   class="box-title visible-xs-block".    This change is to the DIV surrounding the chevron and title seen on XS screens
# CSS for list-group helps keep widgets with lists (e.g. birthdays) from growing in height when there are lots of rows
page_style = '''
<style>
    @media (max-width: 765px){
        .visible-xs-block {
            display: block!important;
        }
        .box-title.visible-xs-block{
         display: block!important;
        }
        .box-title.hidden-xs{
         display: none!important;
        }
    }
  .visible-xs-block {
            display: block!important;
        }
        .box-title.visible-xs-block{
         display: block!important;
        }
        .box-title.hidden-xs{
         display: none!important;
        }
    .list-group {max-height: 215px!important; overflow-y: scroll!important;}
</style>
'''

# Include javascript to make widgets work the same as on the homepage... including functions to redraw the widgets on page size change
page_javascript = '''
<script async="" src="https://www.google-analytics.com/analytics.js"></script>

<script type="text/javascript">
        var WidgetCharts = {};
</script>

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>

<script>
    $('.widget-embed').each(function () {
        var el = $(this);
        var url = el.data('url');
        el.addClass('loading');
        $.get(url, function (data) {
            if (data.includes('Error:')) {
                el.removeClass('loading').addClass('error');
                el.html("<div class='box'><div class='center bg-warning text-warning'><i class='fa fa-3x fa-exclamation-circle'></i><p style='text-align:center;'>Error loading " + el.data('name') + "<br />Contact your system administrator</p></div></div>")
            } else {
                el.html(data);
                el.removeClass('loading');
            }
        }).fail(function () {
            el.removeClass('loading').addClass('error');
            el.html("<div class='box'><div class='center bg-warning text-warning'><i class='fa fa-3x fa-exclamation-circle'></i><p style='text-align:center;'>Error loading " + el.data('name') + "<br />Contact your system administrator</p></div></div>")
        });
    });

    $(window).resize(function () {
        if (this.resizeTO) clearTimeout(this.resizeTO);
        this.resizeTO = setTimeout(function () {
            $(this).trigger('resizeEnd');
            for (var widget in WidgetCharts) {
                WidgetCharts[widget]();
            }
        }, 200);
    });

    // handle google chart resizing
    $(window).on('resizeEnd', function () {
        for (var widget in WidgetCharts) {
            WidgetCharts[widget]();
        }
    });
</script>
'''



pageheader ='<div id="home" class="row">'
pagefooter = '</div>'

colheader =  '<div class="col-sm-4">'
colfooter =  '</div>'

widgetclose = '</div>'




#Now we start the actual code for printing the elements of the page.  This starts with style and javascript followed by the "page" header.
#The "home" div is needed to make the report act like the homepage widgets

print page_style
print page_javascript

print '<head><title>Data Integrity Dashbaord Dashboard</title></head>'
print '<H3 align="center">Data Integrity Dashboard</H3>'

print pageheader

# Column 1
print colheader

# Column 1 - Widget 1

#Now we include all of the information relative to a specific Widget within the Column

#if (model.UserIsInRole("Dashboard")):  #If structure is only needed if this widget is further restricted from the general report Role permission
    #Define WidgetName, WidgetID to be used in the HTML file
    #Define the SQL and HTML content that will be used in the Widget
    #You can get this info from the Homepage Widget Admin Screen
    #Then print an opening DIV with class "widget-embed", call the Python script for the widget itself and finally close the Div by printing widgetclose

Data.WidgetName ='Cleanup of Individuals by Age'
Data.WidgetNumber = '104'
Data.WidgetId = 'widget_104'
Data.HTMLContent = model.Content('WidgetVitalStatsHTML')  #Make sure you adjust the Div in this file.

print '<div class="widget-embed" data-url="/HomeWidgets/Embed/'+ Data.WidgetNumber + '" data-name="' + Data.WidgetName + '">'
print model.CallScript("WidgetDATAINTEGRITYMemberFamily")
print widgetclose


# Column 1 - Widget 2



# Column 1 - Widget 3


print colfooter



# Column 2
print colheader

# Column 2 - Widget 1


#Now we include all of the information relative to a specific Widget within the Column


#if (model.UserIsInRole("Admin,Belong disAbility Ministry")):  #If structure is only needed if this widget is further restricted from the general report Role permission
    #Define WidgetName, WidgetID to be used in the HTML file
    #Define the SQL and HTML content that will be used in the Widget
    #You can get this info from the Homepage Widget Admin Screen
    #Then print an opening DIV with class "widget-embed", call the Python script for the widget itself and finally close the Div by printing widgetclose

Data.WidgetName ='Cleanup of Individual Record'
Data.WidgetNumber = '105'
Data.WidgetId = 'widget_105'
Data.HTMLContent = model.Content('WidgetVitalStatsHTML')  #Make sure you adjust the Div in this file.

print '<div class="widget-embed" data-url="/HomeWidgets/Embed/'+ Data.WidgetNumber + '" data-name="' + Data.WidgetName + '">'
print model.CallScript("WidgetDATAINTEGRITYMemberData")
print widgetclose





# Column 2  - Widget 2



# Column 2  - Widget 3
Data.WidgetName ='Records - Drop Criteria'
Data.WidgetNumber = '1185'
Data.WidgetId = 'widget_1185'
Data.HTMLContent = model.Content('WidgetVitalStatsHTML')  #Make sure you adjust the Div in this file.

print '<div class="widget-embed" data-url="/HomeWidgets/Embed/'+ Data.WidgetNumber + '" data-name="' + Data.WidgetName + '">'
print model.CallScript("WidgetMEMBERSHIPRecordMonitor")
print widgetclose

print colfooter



# Column 3
print colheader

# Column 3 - Widget 1

# Column 2 - Widget 1



Data.WidgetName ='HPUMC MEMBER Population Breakdown'
Data.WidgetNumber = '106'
Data.WidgetId = 'widget_106'
Data.HTMLContent = model.Content('WidgetVitalStatsHTML')  #Make sure you adjust the Div in this file.

print '<div class="widget-embed" data-url="/HomeWidgets/Embed/'+ Data.WidgetNumber + '" data-name="' + Data.WidgetName + '">'
print model.CallScript("WidgetDATAINTEGRITYHPPopulation")
print widgetclose



# Column 3 - Widget 2
Data.WidgetName ='Quick Links'
Data.WidgetNumber = '22'
Data.WidgetId = 'widget_22'
Data.HTMLContent = model.Content('WidgetQuickLinksDataIntegrity')  #Make sure you adjust the Div in this file.

print '<div class="widget-embed" data-url="/HomeWidgets/Embed/'+ Data.WidgetNumber + '" data-name="' + Data.WidgetName + '">'
print model.CallScript("WidgetSERVINGStatsImpact")
print widgetclose

# Column 3 - Widget 3
Data.WidgetName ='Email Checks'
Data.WidgetNumber = '1141'
Data.WidgetId = 'widget_1141'
Data.HTMLContent = model.Content('WidgetQuickLinksDataIntegrityB')  #Make sure you adjust the Div in this file.

print '<div class="widget-embed" data-url="/HomeWidgets/Embed/'+ Data.WidgetNumber + '" data-name="' + Data.WidgetName + '">'
print model.CallScript("WidgetSERVINGStatsImpact")
print widgetclose

print colfooter


print pagefooter